from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np
import tensorflow as tf
import time
import cv2
import os
from scipy import misc
import sys
import argparse
import facenet
import align.detect_face
import random
from time import sleep
import shutil
from tensorflow.python.platform import gfile


minsize = 20 # minimum size of face
threshold = [ 0.6, 0.7, 0.7 ]  # three steps's threshold
factor = 0.709 # scale factor

def main(_):

    with tf.Graph().as_default():
	with tf.Session() as sess:

		img = tf.placeholder("float", [400, 400, 3], name='img_plc')
		
		pnet, rnet, onet = align.detect_face.create_mtcnn(sess, None)
		bounding_boxes, points = tf.py_func(align.detect_face.detect_face,[img, minsize, pnet, rnet, onet, threshold, factor])

		# Retrieve the protobuf graph definition and fix the batch norm nodes
#		input_graph_def = sess.graph.as_graph_def()

		# Get input and output tensors
#		images_placeholder = sess.graph.get_tensor_by_name("input:0")
#		embeddings = sess.graph.get_tensor_by_name("embeddings:0")
		
		#distances = calc_dist(embeddings)

		#feed_dict={boxes: bounding_boxes}

		# Build the signature_def_map.
		predict_inputs_tensor_info = tf.saved_model.utils.build_tensor_info(img)	
		predict_outputs_tensor_info = tf.saved_model.utils.build_tensor_info(tf.convert_to_tensor(bounding_boxes))				
		#dist_output_tensor_info = tf.saved_model.utils.build_tensor_info(distances)


		prediction_signature = tf.saved_model.signature_def_utils.build_signature_def(
		inputs={'images': predict_inputs_tensor_info},
		outputs={'boxes': predict_outputs_tensor_info},
		#'dist': dist_output_tensor_info},
		method_name = tf.saved_model.signature_constants.PREDICT_METHOD_NAME)
            
		legacy_init_op = tf.group(tf.tables_initializer(), name='legacy_init_op')

		# Export inference model.
           	output_path = "./modelMTCNN/1"	
		print('Exporting trained model to', output_path)
		builder = tf.saved_model.builder.SavedModelBuilder(output_path)
            	
		builder.add_meta_graph_and_variables(                
			sess, [tf.saved_model.tag_constants.SERVING],
			signature_def_map={'calculate_boxes': prediction_signature,},
		 	legacy_init_op=legacy_init_op
		)

		builder.save()
           	print('Successfully exported model')



if __name__ == '__main__':
    tf.app.run()
